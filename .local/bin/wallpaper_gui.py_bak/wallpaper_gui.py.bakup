#!/usr/bin/env python3
import tkinter as tk
from tkinter import filedialog, messagebox
import subprocess
import os
import logging
from PIL import Image, ImageTk

# Setup logging
logging.basicConfig(filename="/tmp/wallpaper_gui.log", level=logging.DEBUG, format="%(asctime)s %(message)s")

def get_dominant_colors(file_path, num_colors=5):
    logging.debug("Entering get_dominant_colors")
    try:
        img = Image.open(file_path).convert("RGB")
        img = img.resize((100, 100))
        colors = img.getcolors(maxcolors=10000)
        if colors:
            colors = [color[1] for color in sorted(colors, key=lambda x: x[0], reverse=True)[:num_colors]]
        else:
            colors = img.quantize(colors=num_colors).getpalette()[:num_colors*3]
            colors = [colors[i:i+3] for i in range(0, len(colors), 3)][:num_colors]
        logging.debug("Colors extracted: %s", colors)
        return [f"#{r:02x}{g:02x}{b:02x}" for r, g, b in colors]
    except Exception as e:
        logging.error("Color extraction failed: %s", e)
        return [f"Error: {e}"]

class WallpaperGUI:
    def __init__(self, root):
        logging.debug("Initializing WallpaperGUI")
        self.root = root
        self.root.title("Hyprpaper Wallpaper Setter")
        self.root.geometry("500x600")

        self.thumbnail_buttons = []
        self.active_thumbnail = None
        self.selected_file = None
        self.photo = None
        self.process = None

        self.label = tk.Label(root, text="Select a wallpaper for Hyprpaper", wraplength=450)
        self.label.pack(pady=10)

        self.preview_label = tk.Label(root, text="No image selected")
        self.preview_label.pack(pady=10)

        self.status_label = tk.Label(root, text="", wraplength=450)
        self.status_label.pack(pady=5)

        self.select_button = tk.Button(root, text="Choose Image", command=self.select_wallpaper)
        self.select_button.pack(pady=10)

        self.apply_button = tk.Button(root, text="Apply Wallpaper", command=self.apply_wallpaper, state="disabled")
        self.apply_button.pack(pady=10)

        self.cancel_button = tk.Button(root, text="Cancel", command=self.cancel_wallpaper, state="disabled")
        self.cancel_button.pack(pady=10)

        self.thumb_frame = tk.Frame(root)
        self.thumb_frame.pack(pady=10)

        self.load_thumbnails()

        self.root.geometry("600x600")  # Set window size
        self.root.resizable(False, False)  # Prevent resizing
        self.root.attributes("-topmost", True)  # Keep window always on top

    def load_thumbnails(self):
        wallpaper_dir = os.path.expanduser("~/Wallpaper")
        self.thumbnail_buttons.clear()

        active_wallpaper = None
        try:
            cache_file = os.path.expanduser("~/.cache/current_wallpaper")
            if os.path.isfile(cache_file):
                with open(cache_file, "r") as f:
                    active_wallpaper = f.read().strip()
                logging.debug("Current wallpaper loaded from cache: %s", active_wallpaper)
        except Exception as e:
            logging.warning("Could not read current wallpaper from cache: %s", e)

        for widget in self.thumb_frame.winfo_children():
            widget.destroy()

        row, col = 0, 0
        max_columns = 5  # Thumbnails per row

        for filename in os.listdir(wallpaper_dir):
            full_path = os.path.join(wallpaper_dir, filename)
            if os.path.isfile(full_path) and filename.lower().endswith(('.png', '.jpg', '.jpeg')):
                try:
                    img = Image.open(full_path)
                    img.thumbnail((80, 80))
                    photo = ImageTk.PhotoImage(img)

                    btn = tk.Button(
                        self.thumb_frame,
                        image=photo,
                        highlightthickness=2,
                        highlightbackground="gray",
                        command=lambda path=full_path, b=None: self.load_selected_wallpaper(path, b)
                    )
                    btn.image = photo
                    btn.grid(row=row, column=col, padx=5, pady=5)
                    self.thumbnail_buttons.append((btn, full_path))

                    # Highlight active wallpaper
                    if full_path == active_wallpaper:
                        self.root.after(100, lambda path=full_path, b=btn: self.load_selected_wallpaper(path, b))

                    col += 1
                    if col >= max_columns:
                        col = 0
                        row += 1

                except Exception as e:
                    logging.error("Failed to load thumbnail for %s: %s", full_path, e)

    def load_selected_wallpaper(self, file_path, button=None):
        logging.debug("Loading selected wallpaper: %s", file_path)
        self.selected_file = file_path
        self.label.config(text=f"Selected: {os.path.basename(file_path)}")
        self.apply_button.config(state="normal")
        self.status_label.config(text="")

        try:
            img = Image.open(file_path)
            img.thumbnail((200, 200))
            self.photo = ImageTk.PhotoImage(img)
            self.preview_label.config(image=self.photo, text="")
        except Exception as e:
            self.preview_label.config(image=None, text=f"Preview failed: {e}")
            logging.error("Preview failed: %s", e)

        try:
            colors = get_dominant_colors(file_path)
            self.label.config(text=f"Selected: {os.path.basename(file_path)}\nColors: {', '.join(colors)}")
        except Exception as e:
            self.label.config(text=f"Selected: {os.path.basename(file_path)}\nColor extraction failed: {e}")
            logging.error("Color display failed: %s", e)

        # Highlight selected thumbnail
        for btn, path in self.thumbnail_buttons:
            btn.config(highlightbackground="gray")
            if path == file_path:
                btn.config(highlightbackground="blue")

    def select_wallpaper(self):
        logging.debug("Selecting wallpaper manually")
        file_path = filedialog.askopenfilename(
            title="Select Wallpaper",
            filetypes=[("Image Files", "*.png *.jpg *.jpeg")],
            initialdir=os.path.expanduser("~/Wallpaper")
        )
        if file_path:
            self.load_selected_wallpaper(file_path)

    def apply_wallpaper(self):
        if not self.selected_file:
            messagebox.showerror("Error", "No wallpaper selected!")
            logging.error("No wallpaper selected")
            return

        logging.debug("Applying wallpaper: %s", self.selected_file)
        self.apply_button.config(state="disabled")
        self.cancel_button.config(state="normal")
        self.status_label.config(text="Applying wallpaper, please wait...")

        try:
            self.root.config(cursor="watch")
        except tk.TclError:
            pass
        self.root.update()

        try:
            switch_script = os.path.expanduser("~/.local/bin/switch_wallpaper.sh")
            if not os.path.isfile(switch_script) or not os.access(switch_script, os.X_OK):
                messagebox.showerror("Error", f"switch_wallpaper.sh not found or not executable at {switch_script}")
                logging.error("switch_wallpaper.sh not found or not executable")
                return

            env = os.environ.copy()
            env["HOME"] = os.path.expanduser("~")
            env["PATH"] = f"/usr/bin:/usr/local/bin:{env.get('PATH', '')}"
            self.process = subprocess.Popen(
                [switch_script, self.selected_file],
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True,
                env=env
            )

            def check_process():
                if self.process.poll() is None:
                    self.root.after(100, check_process)
                else:
                    try:
                        stdout, stderr = self.process.communicate(timeout=1)
                        if self.process.returncode != 0:
                            messagebox.showwarning("Warning", f"Wallpaper applied with warnings:\n{stderr}")
                            logging.warning("Wallpaper applied with warnings: %s", stderr)
                        else:
                            messagebox.showinfo("Success", "Wallpaper applied successfully!")
                            logging.info("Wallpaper applied successfully")

                        # Save wallpaper path to cache
                        with open(os.path.expanduser("~/.cache/current_wallpaper"), "w") as f:
                            f.write(self.selected_file)

                        self.load_thumbnails()

                    except subprocess.TimeoutExpired:
                        logging.error("Communication timeout after process completion")
                    finally:
                        self.process = None
                        self.apply_button.config(state="normal")
                        self.cancel_button.config(state="disabled")
                        self.status_label.config(text="")
                        try:
                            self.root.config(cursor="")
                        except tk.TclError:
                            pass
                        self.root.update()
                        logging.debug("apply_wallpaper completed")

            self.root.after(100, check_process)
        except Exception as e:
            self.process = None
            messagebox.showerror("Error", f"An error occurred: {e}")
            logging.error("Error in apply_wallpaper: %s", e)
            self.apply_button.config(state="normal")
            self.cancel_button.config(state="disabled")
            self.status_label.config(text="")
            try:
                self.root.config(cursor="")
            except tk.TclError:
                pass
            self.root.update()

    def cancel_wallpaper(self):
        if self.process and self.process.poll() is None:
            self.process.terminate()
            try:
                self.process.communicate(timeout=1)
            except subprocess.TimeoutExpired:
                self.process.kill()
            self.process = None
            self.status_label.config(text="Cancelled")
            self.apply_button.config(state="normal")
            self.cancel_button.config(state="disabled")
            try:
                self.root.config(cursor="")
            except tk.TclError:
                pass
            self.root.update()
            logging.debug("Wallpaper application cancelled")

if __name__ == "__main__":
    logging.debug("Starting main")
    os.environ["XDG_SESSION_TYPE"] = "wayland"
    root = tk.Tk()
    app = WallpaperGUI(root)
    root.mainloop()

